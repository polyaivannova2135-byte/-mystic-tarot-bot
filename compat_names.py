# compat_names.py

import re
import random
from hashlib import sha1

# === 5 вариантов текста для каждой категории процента ===
TEXTS_NAMES = {
    "low": [
        "Совместимость по именам низкая. Это не приговор — просто придётся внимательнее к границам и ритму друг друга.",
        "Связь по именам хрупкая: береги честность и не форсируй. Мягкий темп важнее ускорений.",
        "Пока энергии мало, и это ок. Если хочется быть вместе — спасут правила, терпение и маленькие шажки.",
        "Стык характеров непростой, но возможный. Фокус на уважении, бытовых договорённостях и «не добивать» в ссорах.",
        "Может быть ощущение «мимо». Если решите пробовать — держите доброжелательный тон и короткую дистанцию до тепла.",
    ],
    "mid": [
        "Средняя совместимость: многое решает навык слышать друг друга. Прозрачность и мелкие ритуалы сближают.",
        "Есть потенциал, но без автоматической магии. Дайте связи время, обозначьте границы и ритм общения.",
        "Местами придётся учиться договариваться. Зато при честности и заботе баланс приходит быстро.",
        "Не идеал, но и не токсик: точечные усилия делают вас ближе. Помогают совместные планы и юмор.",
        "Хорошо для роста: вы друг другу как зеркало. Главное — обсуждать ожидания заранее и не накапливать.",
    ],
    "high": [
        "Высокая совместимость! Легко считываете настроение и поддерживаете. Берегите тон и не забывайте о личном пространстве.",
        "С вами тепло и просто. Добавляйте совместные цели — и химия превращается в устойчивость.",
        "Лёгкость в общении уже есть. Пусть будет больше совместных радостей и меньше контроля — так связь крепнет.",
        "Вам легко синхронизироваться. Ритуалы близости и забота о быте сделают союз очень зрелым.",
        "Резонируете по темпам и ценностям. Сохраняйте игру и доброжелательность — это ваше топливо.",
    ],
    "very_high": [
        "Отличная совместимость по именам — редкий вайб. Поддержка идёт сама, остаётся только беречь её.",
        "Очень тёплая связка. С большой вероятностью вы усиливаете лучшие стороны друг друга.",
        "Мощная гармония: легко и дома. Следите, чтобы не растворяться — личные границы сохраняют искру.",
        "Вместе вам широко дышится. Задавайте общие мечты — это даст направленность и глубину.",
        "Сильный матч. Уважение и нежность у вас по умолчанию — просто не теряйте ежедневные маленькие знаки любви.",
    ],
}

def _clean(s: str) -> str:
    return re.sub(r"[^a-zа-яё0-9]+", "", s.lower())

def name_percent(your_name: str, partner_name: str) -> int:
    """
    Делает стабильный 'псевдослучайный' процент из пары имён.
    Один и тот же набор имён => всегда один и тот же результат.
    """
    raw = f"{_clean(your_name)}|{_clean(partner_name)}".encode("utf-8")
    h = sha1(raw).hexdigest()
    val = int(h[:4], 16)  # 0..65535
    pct = int(round((val / 65535) * 100))
    return max(0, min(100, pct))

def _bucket_for_percent(p: int) -> str:
    if p < 40:
        return "low"
    elif p < 65:
        return "mid"
    elif p < 85:
        return "high"
    else:
        return "very_high"

def name_text_for_percent(p: int) -> str:
    """
    Возвращает случайный текст из 5 в категории (low/mid/high/very_high).
    Каждый раз может быть другой вариант.
    """
    bucket = _bucket_for_percent(p)
    return random.choice(TEXTS_NAMES[bucket])