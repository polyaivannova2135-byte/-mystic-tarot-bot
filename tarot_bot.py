# tarot_bot.py
# --- Keep-alive web –¥–ª—è Replit ---
# --- Keep-alive web –¥–ª—è Render/Replit___

import os
import threading
from flask import Flask
ADMIN_ID = 7495537286
USERS_FILE = "users.json"

def _load_users() -> set[int]:
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return set(data.get("users", []))
    except Exception:
        return set()

def _save_users(users: set[int]) -> None:
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump({"users": sorted(users)}, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

USERS = _load_users()

app = Flask(__name__)

@app.get("/")
def index():
    return "OK"  # healthcheck, UptimeRobot –±—É–¥–µ—Ç –ø–∏–Ω–≥–æ–≤–∞—Ç—å

# Render/Replit —Ç—Ä–µ–±—É–µ—Ç —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
PORT = int(os.getenv("PORT", "8080"))

def run_web():
    app.run(host="0.0.0.0", port=PORT)

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_web, daemon=True).start()

# ========== PYTHON / AIOGRAM ==========
import os
import json
import random
import asyncio

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)

# ========== –ö–ù–û–ü–ö–ò ==========
def get_main_inline() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üåû –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="go:day"),
            InlineKeyboardButton(text="‚ùì –î–∞/–ù–µ—Ç", callback_data="go:ask"),
        ],
        [
            InlineKeyboardButton(text="üîÆ 3 –∫–∞—Ä—Ç—ã", callback_data="go:spread3"),
            InlineKeyboardButton(text="ü¶ã 12 –ò—Å—Ç–∏–Ω", callback_data="go:deep12"),
        ],
        [
            InlineKeyboardButton(text="‚úùÔ∏è –ö—Ä–µ—Å—Ç", callback_data="go:cross"),
        ],
        [
            InlineKeyboardButton(text="üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="go:compat"),
        ],
    ])

def get_main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/day"), KeyboardButton(text="/ask")],
            [KeyboardButton(text="/spread3"), KeyboardButton(text="/deep12")],
            [KeyboardButton(text="/cross")],
            [KeyboardButton(text="/compat")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ========== –ò–ú–ü–û–†–¢–´ –î–ê–ù–ù–´–• ==========
from compat_names import name_percent, name_text_for_percent
from compat_zodiac import ZODIACS, zodiac_percent, zodiac_text_for_percent
from tarot_meanings_love import MEANINGS_LOVE
from tarot_meanings_money import MEANINGS_MONEY
from tarot_meanings_path import MEANINGS_PATH
from tarot_meanings_inner import MEANINGS_INNER
from tarot_conclusions import CONCLUSIONS
from tarot_scores import CARD_SCORES

from cross_meanings.core import CORE_MEANINGS
from cross_meanings.block import BLOCK_MEANINGS
from cross_meanings.past import PAST_MEANINGS
from cross_meanings.future import FUTURE_MEANINGS
from cross_meanings.outcome import OUTCOME_MEANINGS

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ==========
def get_zodiac_kb(who: str) -> InlineKeyboardMarkup:
    rows, row = [], []
    for i, sign in enumerate(ZODIACS, start=1):
        row.append(InlineKeyboardButton(text=sign, callback_data=f"z:{who}:{sign}"))
        if i % 3 == 0:
            rows.append(row); row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

CROSS_MEANINGS = {
    "core": CORE_MEANINGS,
    "block": BLOCK_MEANINGS,
    "past": PAST_MEANINGS,
    "future": FUTURE_MEANINGS,
    "outcome": OUTCOME_MEANINGS,
}

# –ü–∞–º—è—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
USER_FLOW: dict[int, dict] = {}

def meaning_cross(position, name, side):
    src = CROSS_MEANINGS.get(position, {})
    return src.get(name, {}).get(side, "–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

def analyze_sphere(cards):
    """
    cards: [("–ú–∞–≥","upright"), ("–ë–∞—à–Ω—è","reversed"), ...]
    -> "positive" | "neutral" | "challenging"
    """
    score = 0
    for name, side in cards:
        score += CARD_SCORES.get(name, {}).get(side, 0)
    if score >= 1:
        return "positive"
    if score <= -1:
        return "challenging"
    return "neutral"

def meaning_for(sphere, name, side):
    src = {
        "love": MEANINGS_LOVE,
        "money": MEANINGS_MONEY,
        "path": MEANINGS_PATH,
        "inner": MEANINGS_INNER,
    }[sphere]
    return src.get(name, {}).get(side, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

def pick_conclusion(sphere, tone):
    options = CONCLUSIONS.get(sphere, {}).get(tone, [])
    if not options:
        return "–í—ã–≤–æ–¥ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω."
    return random.choice(options)

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ==========
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ===== –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ (–ø–∏–Ω–≥ + —Å—Ç–∞—Ä—Ç) =====
@dp.message(Command("stats"))
async def cmd_stats(m: types.Message):
    if m.from_user.id != ADMIN_ID:
        await m.answer("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    count = len(USERS)
    await m.answer(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
    
@dp.message(Command("ping"))
async def cmd_ping(m: types.Message):
    await m.answer("pong ‚úÖ")

@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    text = (
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç–∞—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚ú®\n\n"
        "–ü–æ–º–Ω–∏: —Ç–∞—Ä–æ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä, –∞ –∑–µ—Ä–∫–∞–ª–æ —Ç–≤–æ–∏—Ö –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤.\n"
        "–†–∞—Å–∫–ª–∞–¥—ã:\n"
        "‚Ä¢ /day ‚Äî üåû –∫–∞—Ä—Ç–∞ –¥–Ω—è + —Å–æ–≤–µ—Ç\n"
        "‚Ä¢ /ask ‚Äî ‚ùì 2 –∫–∞—Ä—Ç—ã ¬´–¥–∞/–Ω–µ—Ç¬ª\n"
        "‚Ä¢ /spread3 ‚Äî üîÆ 3 –∫–∞—Ä—Ç—ã (–õ—é–±–æ–≤—å/–§–∏–Ω–∞–Ω—Å—ã/–û–±—â–∏–π)\n"
        "‚Ä¢ /deep12 ‚Äî ü¶ã ¬´12 –∫–∞—Ä—Ç –ò—Å—Ç–∏–Ω—ã¬ª\n"
        "‚Ä¢ /cross ‚Äî ‚úùÔ∏è ¬´–ö—Ä–µ—Å—Ç¬ª\n"
        "‚Ä¢ /compat ‚Äî üíû —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n\n"
        "–ù–∏–∂–µ ‚Äî –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –ª—é–±–∏—à—å –∑–µ–ª—ë–Ω—ã–µ –±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏ /menu."
    )
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USERS.add(m.from_user.id)
    _save_users(USERS)
    await m.answer(
        text,
        reply_markup=get_main_inline(),  # <-- –ò–ù–õ–ê–ô–ù –≤–º–µ—Å—Ç–æ reply
        parse_mode="HTML"
    )

@dp.message(Command("menu"))
async def cmd_menu(m: types.Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ üëá", reply_markup=get_main_kb())
# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö –° –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ==========
@dp.callback_query(F.data == "go:day")
async def cb_day(callback: types.CallbackQuery):
    await callback.answer()
    await cmd_day(callback.message)

@dp.callback_query(F.data == "go:ask")
async def cb_ask(callback: types.CallbackQuery):
    await callback.answer()
    await cmd_ask(callback.message)

@dp.callback_query(F.data == "go:spread3")
async def cb_spread3(callback: types.CallbackQuery):
    await callback.answer()
    await cmd_spread3(callback.message)

@dp.callback_query(F.data == "go:deep12")
async def cb_deep12(callback: types.CallbackQuery):
    await callback.answer()
    await cmd_deep12(callback.message)

@dp.callback_query(F.data == "go:cross")
async def cb_cross(callback: types.CallbackQuery):
    await callback.answer()
    await cmd_cross(callback.message)

@dp.callback_query(F.data == "go:compat")
async def cb_compat(callback: types.CallbackQuery):
    await callback.answer()
    await cmd_compat(callback.message)

# (–û—Ç–ª–∞–¥—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–±—Ä–∞–ª, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

# ========== –ö–ê–†–¢–ê –î–ù–Ø ==========
DECK_PATH = "deck_day.json"

def load_day_deck() -> dict:
    try:
        with open(DECK_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return data
    except Exception:
        pass
    # –§–æ–ª–±—ç–∫
    return {
        "–ú–∞–≥": {
            "upright": "–î–µ–Ω—å –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤.",
            "reversed": "–ü–æ–∫–∞ –ª—É—á—à–µ –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏—Ç—å –∏ –≤—Å—ë –ø—Ä–æ–¥—É–º–∞—Ç—å."
        },
        "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": {
            "upright": "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ, —É—é—Ç –∏ –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ –∏–¥–µ–π.",
            "reversed": "–ù–µ —Ä–∞—Å—Ç—Ä–∞—á–∏–≤–∞–π —Å–∏–ª—ã ‚Äî –±–µ—Ä–µ–≥–∏ —Ä–µ—Å—É—Ä—Å."
        }
    }

DAY_DECK = load_day_deck()

MAJORS = [
    "–®—É—Ç", "–ú–∞–≥", "–ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
    "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
]

GOOD = {"–ú–∞–≥","–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞","–ò–º–ø–µ—Ä–∞—Ç–æ—Ä","–í–ª—é–±–ª—ë–Ω–Ω—ã–µ","–ö–æ–ª–µ—Å–Ω–∏—Ü–∞","–°–∏–ª–∞","–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã","–ó–≤–µ–∑–¥–∞","–°–æ–ª–Ω—Ü–µ","–ú–∏—Ä","–°—É–¥"}
BAD = {"–î—å—è–≤–æ–ª","–ë–∞—à–Ω—è","–õ—É–Ω–∞"}
NEUTRAL = set(MAJORS) - GOOD - BAD

def pretty_card(name: str, reversed_: bool) -> str:
    return f"{name} (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if reversed_ else name

@dp.message(Command("day"))
async def cmd_day(m: types.Message):
    name = random.choice(list(DAY_DECK.keys()))
    is_reversed = random.choice([False, True])
    side = "reversed" if is_reversed else "upright"
    text = DAY_DECK[name].get(side, "")
    suffix = " (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if is_reversed else ""
    await m.answer(f"ü™Ñ –ö–∞—Ä—Ç–∞ –¥–Ω—è: {name}{suffix}\n{text}")

# ========== –î–ê / –ù–ï–¢ ==========
@dp.message(Command("ask"))
async def cmd_ask(m: types.Message):
    await m.answer("‚ú® –ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞, –∑–∞–≥–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è...")
    for sm in ["üÉè", "üîÆ", "‚ú®"]:
        await asyncio.sleep(1)
        await m.answer(sm)

    c1, r1 = random.choice(MAJORS), random.choice([False, True])
    c2, r2 = random.choice(MAJORS), random.choice([False, True])

    def score(card: str, rev: bool) -> int:
        base = 1 if card in GOOD else -1 if card in BAD else 0
        return -base if rev else base

    s = score(c1, r1) + score(c2, r2)

    advices = [
        "–°–ª—É—à–∞–π —Å–µ—Ä–¥—Ü–µ üíñ", "–î–∞–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤—Ä–µ–º—è ‚è≥", "–î–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏ üåô",
        "–ë—É–¥—å –º—è–≥—á–µ –∫ —Å–µ–±–µ ü§ç", "–°–æ—Ö—Ä–∞–Ω–∏ –±–∞–ª–∞–Ω—Å ‚öñÔ∏è", "–î–µ—Ä–∂–∏ —Ñ–æ–∫—É—Å ‚Äî –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è ‚ú®",
    ]
    advice = random.choice(advices)

    if s >= 2: verdict = "‚úÖ –î–ê"
    elif s == 1: verdict = "üíï –°–∫–æ—Ä–µ–µ –¥–∞"
    elif s == 0: verdict = "ü§ç –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    elif s == -1: verdict = "üå§Ô∏è –°–∫–æ—Ä–µ–µ –Ω–µ—Ç"
    elif s <= -2: verdict = "‚ùå –ù–ï–¢"
    else: verdict = "üëÅÔ∏è –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å (–∫–∞—Ä—Ç—ã –Ω–µ –≤–∏–¥—è—Ç)"

    text = (
        "–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:\n"
        f"‚Ä¢ {pretty_card(c1, r1)}\n"
        f"‚Ä¢ {pretty_card(c2, r2)}\n\n"
        f"–°–æ–≤–µ—Ç: {advice}\n\n"
        f"–û—Ç–≤–µ—Ç: {verdict}"
    )
    await m.answer(text)

# ========== /spread3 ==========
@dp.message(Command("spread3"))
async def cmd_spread3(m: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üíñ –õ—é–±–æ–≤—å",   callback_data="spread_love"),
            InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã",  callback_data="spread_money"),
            InlineKeyboardButton(text="ü™ê –û–±—â–∏–π",    callback_data="spread_general"),
        ]]
    )
    await m.answer("‚ú® –í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("spread_"))
async def process_spread_callback(callback_query: types.CallbackQuery):
    theme = callback_query.data  # spread_love / spread_money / spread_general

    await callback_query.message.answer("üîÆ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É...")
    await asyncio.sleep(1)
    await callback_query.message.answer("üÉè –î–æ—Å—Ç–∞—é –∫–∞—Ä—Ç—ã...")
    await asyncio.sleep(1)

    cards = []
    for _ in range(3):  # (–ø–æ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ ‚Äî –ø–æ–≤—Ç–æ—Ä—ã –≤–æ–∑–º–æ–∂–Ω—ã)
        name = random.choice(MAJORS)
        is_reversed = random.choice([True, False])
        suffix = " (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if is_reversed else ""
        cards.append(f"üÉè {name}{suffix}")

    cards_text = "\n".join(cards)

    conclusions = {
        "spread_love": [
            "üíñ –í –ª—é–±–≤–∏ —Å–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ –±—ã—Ç—å —á–µ—Å—Ç–Ω–æ–π —Å —Å–æ–±–æ–π. –ù–µ–º–Ω–æ–≥–æ –º—è–≥–∫–æ—Å—Ç–∏ ‚Äî –∏ —Å–≤—è–∑—å —Å—Ç–∞–Ω–µ—Ç —Ç–µ–ø–ª–µ–µ.",
            "üåπ –ù–∞–∑—Ä–µ–≤–∞–µ—Ç –Ω–æ–≤—ã–π —ç—Ç–∞–ø ‚Äî –Ω–µ –±–æ–π—Å—è –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —á—É–≤—Å—Ç–≤–∞—Ö.",
            "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–æ—Å—è—Ç –∑–∞–±–æ—Ç—ã –∏ –≤–Ω–∏–º–∞–Ω–∏—è. –ù–µ–∂–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å ‚Äî —ç—Ç–æ —Å–∏–ª–∞.",
            "‚ú® –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω: –æ—Ç–ø—É—Å—Ç–∏ —Å—Ç–∞—Ä–æ–µ, —á—Ç–æ–±—ã –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ.",
            "üíå –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –∏ —Ç—ë–ø–ª—ã–µ –∂–µ—Å—Ç—ã.",
            "üå∑ –£—è–∑–≤–∏–º–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Å–º–µ–ª–æ—Å—Ç—å. –û–Ω–∞ —É–∫—Ä–µ–ø–∏—Ç –±–ª–∏–∑–æ—Å—Ç—å.",
            "üîÆ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ–¥—ë—Ç –∫ –ª—ë–≥–∫–æ—Å—Ç–∏ –≤ —á—É–≤—Å—Ç–≤–∞—Ö.",
            "ü§ç –ï—Å–ª–∏ –±—ã–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ ‚Äî –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ. –ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ.",
            "üåô –î–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äî —Å–µ—Ä–¥—Ü–µ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞.",
            "üåü –í–æ–∑–º–æ–∂–Ω–∞ —Å—É–¥—å–±–æ–Ω–æ—Å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∏–ª–∏ —Ç—ë–ø–ª—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.",
            "üåº –ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ —É–ª—É—á—à–∏—Ç –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è ‚Äî –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏.",
            "‚ú® –õ—é–±–æ–≤—å —Ä—è–¥–æ–º. –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –º–Ω–æ–≥–æ–µ –∏–∑–º–µ–Ω–∏—Ç.",
        ],
        "spread_money": [
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ–∫–æ–π–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
            "üìä –î–µ–Ω—å–≥–∏ –¥–≤–∏–∂—É—Ç—Å—è –≤–µ—Ä–Ω–æ ‚Äî –¥–µ—Ä–∂–∏ –±–∞–ª–∞–Ω—Å —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π.",
            "üåô –í–æ–∑–º–æ–∂–Ω–∞ –Ω–µ–±–æ–ª—å—à–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è. –¢–µ—Ä–ø–µ–Ω–∏–µ –æ–∫—É–ø–∏—Ç—Å—è.",
            "‚ú® –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–¥—ë–∂–Ω–µ–µ —Ä–µ–∑–∫–∏—Ö —à–∞–≥–æ–≤.",
            "üíé –ë—É–¥—å –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–π: –ø—Ä–æ–¥—É–º—ã–≤–∞–π —Ä–µ—à–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ.",
            "‚öñÔ∏è –ò–∑–±–µ–≥–∞–π –∫—Ä–∞–π–Ω–æ—Å—Ç–µ–π ‚Äî –≤—ã–±–µ—Ä–∏ –∑–æ–ª–æ—Ç—É—é —Å–µ—Ä–µ–¥–∏–Ω—É.",
            "üìà –¢–µ–Ω–¥–µ–Ω—Ü–∏—è –∫ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é –µ—Å—Ç—å ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏ —Ñ–æ–∫—É—Å.",
            "üîÆ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–Ω–µ–∂–Ω–æ–º—É –ø–æ—Ç–æ–∫—É.",
            "üåü –ü–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ‚Äî –æ—Ü–µ–Ω–∏ –µ—ë –±–µ–∑ —Å–ø–µ—à–∫–∏.",
            "üíµ –ï—Å–ª–∏ –±—ã–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ ‚Äî –Ω–∞–º–µ—Ç–∏—Ç—Å—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ. –î–µ—Ä–∂–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å.",
            "üß≠ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∏—Å—Ç–µ–º–∞ –¥–∞–¥—É—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.",
            "ü™ô –ù–µ–±–æ–ª—å—à–æ–π —Ä–µ–∑–µ—Ä–≤ —Å–ø–∞—Å—ë—Ç –æ—Ç –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö —Ç—Ä–∞—Ç.",
        ],
        "spread_general": [
            "ü™ê –î–µ–Ω—å –º—è–≥–∫–∏–π, –Ω–æ –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–º–µ–Ω. –°—Ç–∞—Ä–æ–µ —É—Ö–æ–¥–∏—Ç ‚Äî –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ.",
            "‚ú® –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äî –æ—Ç–≤–µ—Ç—ã —Ä—è–¥–æ–º.",
            "üå± –≠–Ω–µ—Ä–≥–∏—è —Ä–æ—Å—Ç–∞ –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —à–∞–≥–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ.",
            "üî≠ –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ü–∏–∫–ª ‚Äî –≤—Ä–µ–º—è –Ω–∞–º–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞–Ω—ã.",
            "üå∑ –ë–∞–ª–∞–Ω—Å –≤ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å –∏ –≤–Ω–µ—à–Ω–∏–µ –¥–µ–ª–∞.",
            "üåô –ó–∞–º–µ—á–∞–π –∑–Ω–∞–∫–∏ –∏ –æ—â—É—â–µ–Ω–∏—è ‚Äî –æ–Ω–∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç –≤–∞–∂–Ω–æ–µ.",
            "üßπ –ù–µ–±–æ–ª—å—à–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–∞—Å—Ç –ª—ë–≥–∫–æ—Å—Ç—å.",
            "üíé –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏/—Å–ª–æ–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ —Å—É–¥—å–±—ã.",
            "‚ú® –ú–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏.",
            "üå∏ –ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Å–æ—á–µ—Ç–∞–Ω–∏—è –¥–µ–ª –∏ –æ—Ç–¥—ã—Ö–∞.",
            "üîÆ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤–æ–µ ‚Äî –¥–æ–≤–µ—Ä—å—Å—è –Ω–∞—á–∞–ª—É.",
            "üå§Ô∏è –ù–µ —Å–ø–µ—à–∏ ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥–µ—Ç–∞–ª—è–º –ø—Ä–∏–Ω–µ—Å—ë—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ.",
        ],
    }

    advice = random.choice(conclusions.get(theme, ["‚ú® –°–ª—É—à–∞–π –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –¥–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å—É."]))
    await callback_query.message.answer(f"üîÆ –¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥:\n\n{cards_text}\n\n{advice}")
    await callback_query.answer()

# ========== 12 –ö–ê–†–¢ –ò–°–¢–ò–ù–´ ==========
@dp.message(Command("deep12"))
async def cmd_deep12(m: types.Message):
    spheres = [
        ("love",  "‚ù§Ô∏è –õ—é–±–æ–≤—å"),
        ("money", "üí∞ –§–∏–Ω–∞–Ω—Å—ã"),
        ("path",  "üß≠ –ò—Å—Ç–∏–Ω–Ω—ã–π –ø—É—Ç—å"),
        ("inner", "üïä –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä"),
    ]

    await m.answer("‚ú® –î–µ–ª–∞—é –≥–ª—É–±–æ–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ ¬´12 –∫–∞—Ä—Ç –ò—Å—Ç–∏–Ω—ã¬ª. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É‚Ä¶")

    unique_12 = random.sample(MAJORS, 12)  # –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
    random.shuffle(unique_12)
    take_index = 0

    text_parts = []
    for sphere_key, sphere_title in spheres:
        names = unique_12[take_index:take_index + 3]
        take_index += 3

        three = []
        for name in names:
            side = "reversed" if random.choice([True, False]) else "upright"
            three.append((name, side))

        lines = [
            f"‚Äî {pretty_card(n, s == 'reversed')}: {meaning_for(sphere_key, n, s)}"
            for (n, s) in three
        ]

        tone = analyze_sphere(three)
        conclusion = pick_conclusion(sphere_key, tone)

        block = (
            f"\n<b>{sphere_title}</b>\n"
            f"{lines[0]}\n{lines[1]}\n{lines[2]}\n\n"
            f"<b>–í—ã–≤–æ–¥:</b> {conclusion}\n"
        )
        text_parts.append(block)

    full_text = "üîÆ <b>–†–∞—Å–∫–ª–∞–¥ ¬´12 –∫–∞—Ä—Ç –ò—Å—Ç–∏–Ω—ã¬ª</b>\n" + "\n".join(text_parts)
    await m.answer(full_text)

# ========== –ö–†–ï–°–¢ ==========
@dp.message(Command("cross"))
async def cmd_cross(m: types.Message):
    positions = [
        ("core",    "‚ú® –°—É—Ç—å"),
        ("block",   "‚õîÔ∏è –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ"),
        ("past",    "‚åõÔ∏è –ü—Ä–æ—à–ª–æ–µ"),
        ("future",  "üåÖ –ë—É–¥—É—â–µ–µ"),
        ("outcome", "üéØ –ò—Ç–æ–≥"),
    ]

    intro = (
        "üîÆ <b>–†–∞—Å–∫–ª–∞–¥ ¬´–ö—Ä–µ—Å—Ç¬ª</b>\n\n"
        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Å–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ. –ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –Ω–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, "
        "—Å–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ –≤—ã–¥–æ—Ö. –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –¥–µ—Ä–∂–∏—à—å –∫–æ–ª–æ–¥—É‚Ä¶"
    )
    await m.answer(intro)

    anim = await m.answer("üÉè –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É‚Ä¶")
    for dots in ["", " .", " ..", " ...", " ....", " ....."]:
        await asyncio.sleep(0.9)
        try:
            await anim.edit_text(f"üÉè –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É{dots}")
        except Exception:
            pass

    names = random.sample(MAJORS, k=5)  # –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
    text_parts = []
    for (pos_key, pos_title), name in zip(positions, names):
        is_rev = random.choice([False, True])
        side = "reversed" if is_rev else "upright"
        line = f"‚Äî {pretty_card(name, is_rev)}: {meaning_cross(pos_key, name, side)}"
        text_parts.append(f"\n<b>{pos_title}</b>\n{line}")

    full_text = "üîÆ <b>–†–∞—Å–∫–ª–∞–¥ ¬´–ö—Ä–µ—Å—Ç¬ª</b>\n" + "\n".join(text_parts)

    try:
        await anim.delete()
    except Exception:
        pass
    await m.answer(full_text)

# ========== –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ ==========
@dp.message(Command("compat"))
async def cmd_compat(m: types.Message):
    uid = m.from_user.id
    USER_FLOW[uid] = {
        "state": "ask_self_name",
        "self_name": None,
        "partner_name": None,
        "self_zodiac": None,
        "partner_zodiac": None,
    }
    await m.answer("üíû <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b>\n\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–≤–æ—ë –∏–º—è</b>.")

@dp.message(F.text)
async def compat_flow(m: types.Message):
    uid = m.from_user.id
    flow = USER_FLOW.get(uid)
    if not flow:
        return

    if flow["state"] == "ask_self_name":
        flow["self_name"] = m.text.strip()
        flow["state"] = "ask_partner_name"
        await m.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ <b>–∏–º—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞</b>.")
        return

    if flow["state"] == "ask_partner_name":
        flow["partner_name"] = m.text.strip()
        flow["state"] = "pick_self_zodiac"
        await m.answer("–í—ã–±–µ—Ä–∏ <b>—Å–≤–æ–π</b> –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=get_zodiac_kb("self"))
        return

@dp.callback_query(F.data.startswith("z:self:"))
async def pick_self_zodiac(callback: types.CallbackQuery):
    uid = callback.from_user.id
    flow = USER_FLOW.get(uid)
    if not flow:
        await callback.answer(); return

    my_sign = callback.data.split(":", 2)[2]
    flow["self_zodiac"] = my_sign
    flow["state"] = "pick_partner_zodiac"
    await callback.message.edit_text(
        f"–¢–≤–æ–π –∑–Ω–∞–∫: <b>{my_sign}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ <b>–ø–∞—Ä—Ç–Ω—ë—Ä–∞</b>:",
        reply_markup=get_zodiac_kb("partner"),
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("z:partner:"))
async def pick_partner_zodiac(callback: types.CallbackQuery):
    uid = callback.from_user.id
    flow = USER_FLOW.get(uid)
    if not flow:
        await callback.answer(); return

    partner_sign = callback.data.split(":", 2)[2]
    flow["partner_zodiac"] = partner_sign

    n_pct = name_percent(flow["self_name"], flow["partner_name"])
    n_text = name_text_for_percent(n_pct)

    z_pct = zodiac_percent(flow["self_zodiac"], flow["partner_zodiac"])
    z_text = zodiac_text_for_percent(z_pct)

    total = int(round((n_pct + z_pct) / 2))
    if total >= 80:
        overall = "‚ú® –°–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å –∏ –æ—Ç–ª–∏—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞!"
    elif total >= 60:
        overall = "üåø –•–æ—Ä–æ—à–∞—è –±–∞–∑–∞ ‚Äî –º–Ω–æ–≥–æ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—â–µ–Ω–∏—è –∏ —É–≤–∞–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü."
    elif total >= 40:
        overall = "‚öñÔ∏è –°–æ—é–∑ –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ä–∞–∑–ª–∏—á–∏—è–º."
    else:
        overall = "üåë –°–≤—è–∑—å –Ω–µ–ø—Ä–æ—Å—Ç–∞—è ‚Äî –±–µ–∑ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª–æ."

    txt = (
        f"üíû <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b>\n\n"
        f"–¢—ã: <b>{flow['self_name']}</b> ‚Äî {flow['self_zodiac']}\n"
        f"–ü–∞—Ä—Ç–Ω—ë—Ä: <b>{flow['partner_name']}</b> ‚Äî {flow['partner_zodiac']}\n\n"
        f"üìõ –ü–æ –∏–º–µ–Ω–∞–º: <b>{n_pct}%</b>\n‚Äî {n_text}\n\n"
        f"üåü –ü–æ –∑–Ω–∞–∫–∞–º: <b>{z_pct}%</b>\n‚Äî {z_text}\n\n"
        f"üß© –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞: <b>{total}%</b>\n{overall}\n\n"
        f"<i>–ü—Ä–æ—Ü–µ–Ω—Ç—ã ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä. –ù–∞—Å—Ç–æ—è—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏–∑ –≤—ã–±–æ—Ä–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏—è –¥–≤–æ–∏—Ö.</i>"
    )

    try:
        await callback.message.edit_text(txt)
    except Exception:
        await callback.message.answer(txt)

    await callback.answer()
    USER_FLOW.pop(uid, None)
# –ê–ª–∏–∞—Å—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ ReplyKeyboard (–ª–æ–≤–∏–º —Ä–æ–≤–Ω–æ —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç)
@dp.message(F.text == "üåû –ö–∞—Ä—Ç–∞ –¥–Ω—è")
async def kb_day(m: types.Message):
    await cmd_day(m)

@dp.message(F.text == "‚ùì –î–∞/–ù–µ—Ç")
async def kb_ask(m: types.Message):
    await cmd_ask(m)

@dp.message(F.text == "üîÆ 3 –∫–∞—Ä—Ç—ã")
async def kb_spread3(m: types.Message):
    await cmd_spread3(m)

@dp.message(F.text == "ü¶ã 12 –ò—Å—Ç–∏–Ω")
async def kb_deep12(m: types.Message):
    await cmd_deep12(m)

@dp.message(F.text == "‚úùÔ∏è –ö—Ä–µ—Å—Ç")
async def kb_cross(m: types.Message):
    await cmd_cross(m)

@dp.message(F.text == "üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
async def kb_compat(m: types.Message):
    await cmd_compat(m)

# ========== –í–•–û–î –í –ë–û–¢–ê ==========
async def run_bot():
    if not TOKEN:
        raise RuntimeError("–ù–µ—Ç BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Secrets)")
    me = await bot.get_me()
    print("Logged in as:", me.id, f"@{me.username}")

    # –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–¥–µ–Ω—Ç–∞—Ü–∏—è –∑–¥–µ—Å—å (–±—ã–ª —Å–∏–Ω—Ç–∞–∫—Å-–∫—Ä–∞—à)
    await bot.delete_webhook(drop_pending_updates=True)

    print("Bot started")
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

__all__ = ["run_bot"]
if __name__ == "__main__":
    import asyncio
    asyncio.run(run_bot())